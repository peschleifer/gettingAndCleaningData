setwd("~/Coursrera/JohnsHopkins/Data Science/R Programming/Assignment3")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
head(outcome)
ncol(outcome)
names(outcome)
nrow(outcome)
head(outcome[,11])
outcome[,11] <- as.numeric(outcome[,11])
head(outcome[,11])
hist(outcome[,11])
outcome$state
outcome$State
?unique
unique(outcome$State)
unique(outcome$State)["AK"]
unique(outcome$State)[2]
state.abb
"TX" in state.abb
state.abb[[2]]
state.abb[["AK"]]
match("TX",state.abb)
match("ZZ",state.abb)
if (match('ZZ',state.abb) == NA) print "Ouch"
if (match("ZZ",state.abb) == NA) print "Ouch"
if (match("ZZ",state.abb) = NA) print "Ouch"
if (match("ZZ",state.abb) == NA) print 2
if (match("ZZ",state.abb) == NA) print ("ouch")
if (match("ZZ",state.abb) == NA) x <- 3
if (match("ZZ",state.abb) is NA) x <- 3
if (match("ZZ",state.abb) == NA) {x <- 3}
if (match("ZZ",state.abb) == NA)
3
?if
()
if (match("ZZ",state.abb) == 43)
print("hello")
x <- if (match("ZZ",state.abb) == 43)
x
match("ZZ",state.abb) == NA
match("ZZ",state.abb) == 43
match("TX",state.abb) == 43
match("TX",state.abb) == NA
match("TX",state.abb) is NA
is.NA(match("TX",state.abb))
is.na(match("TX",state.abb))
is.na(match("ZZ",state.abb))
if (is.na(match("TX",state.abb))) print "not state"
if (is.na(match("TX",state.abb))) print "not state"
if (is.na(match("TX",state.abb))) print ("not state")
if (is.na(match("ZZ",state.abb))) print ("not state")
?stop
if (is.na(match("ZZ",state.abb))) stop "invalid state"
if (is.na(match("ZZ",state.abb))) stop ("invalid state")
match("outcome", names(outcomes))
match("outcome", names(outcome))
names(outcome)
match("Rates", names(outcome))
match("Rates", names(outcome)[1])
match("Rates", names(outcome)[44])
?match
Rates %in% names(outcome)
"Rates" %in% names(outcome)
"Rates" %in% names(outcome)[44]
1:10 %in% c(1,3,5,9)
outcomes <- c("heart attack", "heart failure", "pneumona")
match("pneumonia", outcomes)
outcomes <- c("heart attack", "heart failure", "pneumonia")
match("pneumonia", outcomes)
?data.frame
outcomes <- data.frame( outcomeColumn=11, outcomeName="heart attack")
outcomes
outcomes <- data.frame( outcomeColumn=c(11,17), outcomeName=c("heart attack","heart failure") )
outcomes
outcomes <- data.frame( outcomeColumn=c(11,17,23), outcomeName=c("heart attack","heart failure", "pneumonia") )
outcomes
hospitalOutcomes <- read.csv("outcome-of-care-measures.csv", colClasses="character")
outcomeRow <- match("heart failire", outcomes$outcomeName)
outcomeRow
outcomeRow <- match("heart failure", outcomes$outcomeName)
outcomeRow
outcomes$outcomeColumn[outcomeRow]
head(hospitalOutcomes[,11])
italOutcomes[,outcomes$outcomeColumn[outcomeRow]] <- as.numeric(hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]])
hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]] <- as.numeric(hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]])
head(hospitalOutcomes[,11])
head(hospitalOutcomes[,17])
?min
min( hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]])
min( hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]], na.rm=TRUE)
hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]] == min( hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]], na.rm=TRUE)
h <- hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]]
h[h == min( h, na.rm=TRUE),]
outcomes[h == min( h, na.rm=TRUE),]
outcomes[!is.na(h == min( h, na.rm=TRUE)),]
!is.na(h == min( h, na.rm=TRUE))
h[!is.na(h == min( h, na.rm=TRUE))]
!is.na(h == min( h, na.rm=TRUE))
h == min( h, na.rm=TRUE)
(h == min( h, na.rm=TRUE)) == TRUE
b <- h == min( h, na.rm=TRUE)
hospitalOutcomes[b & !is.na(b),]
hospitalOutcomes[b & !is.na(b),$Hospital.Name]
hospitalOutcomes[b & !is.na(b),"Hospital.Name"]
min(hospitalOutcomes[b & !is.na(b),"Hospital.Name"])
source("best.R")
best("TX","pneumonia")
source("best.R")
best("TX","pneumonia")
best("TX","heart failure")
best("TX","heart attack")
stateOutcomes <- hospitalOutcomes["State"=="TX",]
stateOutcomes
stateOutcomes <- hospitalOutcomes[$State=="TX",]
stateOutcomes <- hospitalOutcomes[hospitalOutcomes$State=="TX",]
stateOutcomes
head(stateOutcomes)
head(stateOutcomes)$Hospital.Name
stateOutcomes <- hospitalOutcomes[hospitalOutcomes$State=="RI",]
head(stateOutcomes)$Hospital.Name
stateOutcomes <- hospitalOutcomes[hospitalOutcomes$State=="RI",c(2,outcomeColumn[outcomeRow]]
stateOutcomes <- hospitalOutcomes[hospitalOutcomes$State=="RI",c(2,17)]
head(stateOutcomes)
stateOutcomes <- hospitalOutcomes[hospitalOutcomes$State=="RI",c(2,c(2,outcomes$outcomeColumn[outcomeRow]))]
head(stateOutcomes)
stateOutcomes <- hospitalOutcomes[hospitalOutcomes$State=="RI",c(2,outcomes$outcomeColumn[outcomeRow])]
head(stateOutcomes)
soure("best.R")
source("best.R")
best("TX","pneumonia")
source("best.R")
best("TX","pneumonia")
best("TX","heart failure")
best("TX","heart attack")
?as.numeric
source("best.R")
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
best("NY","heart attack")
best("NY","heart failure")
best("NY","heart failur")
best("AA","heart failure")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
nrow(stateOutcomes)
?order
stateOutcomes
is.na(stateOutcomes[,2])
!is.na(stateOutcomes[,2])
stateOutcomes[!is.na(stateOutcomes[,2]),]
so <- stateOutcomes[!is.na(stateOutcomes[,2]),]
order(so[,2],so[,1])
sorted <- order(so[,2],so[,1])
so[sorted[3]]
so[sorted[3,]]
so[sorted[3],]
so[sorted[3],]$Hospital.Name
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
submit()
submit()
submit()
submit()
?qpois
?rbinom
outcomeRow
ho <- hospitalOutcomes[!is.na(hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]]),]
head(ho)
ho <- hospitalOutcomes[!is.na(hospitalOutcomes[,outcomes$outcomeColumn[outcomeRow]]),c(2,7,outcomes$outcomeColumn[outcomeRow])]
head(ho)
?split
split(ho,ho$state)
?gf
?gl
ho$state
ho$State
split(ho,ho$State)
split(ho,ho$State)$WV
lapply(split(ho,ho$State),min)
lapply(split(ho,ho$State)[3],min)
split(ho,ho$State)$WV[3]
min(split(ho,ho$State)$WV[3])
sp <- split(ho,ho$State)
order( sp$WV[,3], sp$WV[,1])
lapply(sp, function(x) order( x[,3], x[,1]))
so <- lapply(split(ho,ho$State), function(x) order( x[,3], x[,1]))
sp$WY
so$WY
sp$WY[so$WY[5]]
sp$WY[so$WY[5],]
sp$WY[so$WY[10],]
sp$WY[so$WY[20],]
unique(ho$State)
?sort
unique(ho$State)
sort(unique(ho$State))
?data.frame
data.fram(hospital=NA, state=sort(unique(ho$State)))
data.frame(hospital=NA, state=sort(unique(ho$State)))
?for
()
sp$WY[so$WY[20],]
st <- "WY"
length(sp[st])
length(sp[st][1])
length(so[st])
sp$WY
so$WY
length(so$WY)
length(so$st)
so[st]
length(so[st])
nrow(so[st])
ncol(so[st])
class(so[st])
?length
length(so[st,1])
lapply(so,length)
lapply(so,length)[st]
sapply(so,length)[st]
sapply(so,length)
source("rankall.R")
rankall("pneumonia", 2)
source("rankall.R")
source("rankall.R")
rankall("pneumonia", 2)
source("rankall.R")
rankall("pneumonia", 2)
source("rankall.R")
source("rankall.R")
source("rankall.R")
rankall("pneumonia", 2)
source("rankall.R")
rankall("pneumonia", 2)
source("rankall.R")
rankall("pneumonia", 2)
source("rankall.R")
rankall("pneumonia", 2)
so["WY"]
st
so[st]
so[st][2]
stateOrder <-so[st]
stateOrder
stateOrder[1]
as.list(stateOrder[1])
as.vector(stateOrder[1])
as.vector(stateOrder)
as.vector(stateOrder)[2]
as.list(stateOrder)[2]
class(stateOrder)
stateOrder[[2]
stateOrder[[2]]
stateOrder[[2]]
stateOrder[[1]]
stateOrder[[1]][[1]]
stateOrder[[1]][[2]]
stateOrder[1][2]
stateOrder[[1]][2]
so[st]
so[st][[1]]
head(ho)
head(ho[st])
ho <- split(ho,ho$State)
head(ho[st])
source("rankall.R")
rankall("pneumonia", 2)
source("rankall.R")
rankall("pneumonia", 2)
ho[st]
ho[st][2]
ho[st][[1]]
ho[st][[1]][2]
ho[st][[1]][3,]
ho[st][[1]][\23,]
ho[st][[1]][2,]
ho[st][[1]][7,]
ho[st][[1]][11,]
ho[st][[1]][stateOrder[11],]
stateOrder
ho[st][[1]][stateOrder[[1]][10],]
ho[st][[1]][stateOrder[[1]][1],]
source("rankall.R")
rankall("pneumonia", 2)
source("rankall.R")
rankall("pneumonia", 2)
source("rankall.R")
rankall("pneumonia", 2)
rankall("pneumonia", "worst")
numInState["WY"]
numInState <- sapply(so,length)
numInState["WY"]
numInState
numInState[["WY"]]
class(numInState["WY"])
class(numInState[["WY"]])
rankall("pneumonia", 2)
source("rankall.R")
rankall("pneumonia", "worst")
source("rankall.R")
rankall("pneumonia", "worst")
source("rankall.R")
rankall("pneumonia", "worst")
source("rankall.R")
rankall("pneumonia", "worst")
rankall("pneumonia", 100)
rankall("heart attack", 100)
rankall("heart attack", "best")
rankall("heart attack", 1)
rankall("heart attack", 12)
rankall("heart attack", 5000)
submit()
submit()
submit()
ls
ls()
source("cacheMatrix.R")
setwd("~/Coursrera/JohnsHopkins/Data Science/R Programming/Assignment2/ProgrammingAssignment2")
source("cacheMatrix.R")
?solve
setwd("~/Coursrera/JohnsHopkins/Data Science/Getting and Cleaning Data/Quiz1")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","question1.csv")
?read/csv
?read.csv
q1 <- read.csv("question1.csv")
head(q1)
unique(q1$ST)
unique(q1$ADJUST)
unique(q1$VAL)
sum(q1$val==24)
sum(q1$VAL==24)
sum(q1$VAL==24.na.rm=TRUE)
sum(q1$VAL==24,na.rm=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "question3_NGAP.xlsx")
?read.xlsx
library()
install.packages(xlsx)
install.packages("xlsx")
library(xlsx)
?Sys.getenv
Sys.getenv("JAVA_HOME")
library(rjava)
library(rJava)
install.packages("rJava")
library(xlsx)
library(rJava)
find.java <- function() {
for (root in c("HLM", "HCU")) for (key in c("Software\\JavaSoft\\Java Runtime Environment",
"Software\\JavaSoft\\Java Development Kit")) {
hive <- try(utils::readRegistry(key, root, 2),
silent = TRUE)
if (!inherits(hive, "try-error"))
return(hive)
}
hive
}
find.java()
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre7")
library(rJava)
library(xlsx)
?read.xlsx
ngap <- read.xslx("question3_NGAP.xlsx", rowIndex=18:23, colIndex=7:15)
ngap <- read.xlsx("question3_NGAP.xlsx", rowIndex=18:23, colIndex=7:15)
ngap <- read.xlsx("question3_NGAP.xlsx", 1, rowIndex=18:23, colIndex=7:15)
ngap <- read.xlsx("question3_NGAP.xlsx", 1 )
ngap <- read.xlsx("question3_NGAP.xlsx", 0 )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "question3_NGAP.xlsx",mode="wb")
ngap <- read.xlsx("question3_NGAP.xlsx", 1, rowIndex=18:23, colIndex=7:15)
ngap
dat <- ngap
dat
sum(dat$Zip*dat$Ext,na.rm=T)
456*80120
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml","restaurants.xml")
library(XML)
install.packacges("XML")
install.packages("XML")
library(XML)
?xmlTreeParse
doc <- xmlTreeParse("restaurants.xml",useInternalNodes=TRUE)
names(xmlRoot(doc))
xmlRoot(doc)[[1]]
xmlRoot(doc)[[1]]$zipcode
xmlRoot(doc)[[1]][[3]]
xmlRoot(doc)[[1]][[3]]$zipcode
xmlRoot(doc)[[1]][[3]][[3]]
xmlRoot(doc)[[1]][[3]][[2]]
root <- xmlRoot(doc)
root
names(root)
names(root[[1]])
names(root[[2]])
names(root[[1]][[1]])
resp <- root[[1]]
names(resp)
?xpathSApply
xpathSApply(resp,"//zipcode", xmlValue)
xpathSApply(resp,"//zipcode='21231'", xmlValue)
xpathSApply(resp,"//zipcode=='21231'", xmlValue)
xpathSApply(resp,"//zipcode[@value='21231']", xmlValue)
xpathSApply(resp,"//zipcode[@value=='21231']", xmlValue)
xpathSApply(resp,"//zipcode[@value='21231']", xmlValue)
x <- xpathSApply(resp,"//zipcode[@value='21231']", xmlValue)
x
x[1]
x <- xpathSApply(resp,"//zipcode[@text='21231']", xmlValue)
x
xpathSApply(resp,"//zipcode", xmlValue)
xpathSApply(resp,"//zipcode", xmlValue) == "21231"
sum(xpathSApply(resp,"//zipcode", xmlValue) == "21231")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "Fss06pid.csv")
library(data.table)
install.packages("data.table")
library(data.table)
?data.table
?fread
DT <- fread(""Fss06pid.csv", data.table=TRUE, verbose=TRUE)
DT <- fread(Fss06pid.csv", data.table=TRUE, verbose=TRUE)
)
""
DT <- fread("Fss06pid.csv", data.table=TRUE, verbose=TRUE)
names(DT)
DT[,mean(pwgtp15),by=SEX]
setwd("~/Coursrera/JohnsHopkins/Data Science/Getting and Cleaning Data/CourseProject")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","UCI HAR Dataset.zip")
?unzip
unzip("UCI HAR Dataset.zip",list=TRUE)
?Sys.getenv
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
Sys.getenv("R_LIBS")
View(dat)
View(`q1`)
Sys.getenv()
